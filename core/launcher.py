from gui.main_window import MainWindow
from gui.config_manager import ConfigManager
from pathlib import Path
import customtkinter as ctk
#import os

def run_ide():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = ConfigManager()

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
    ctk.set_appearance_mode(config.config["theme"])
    ctk.set_default_color_theme(config.config["color_theme"])

    # –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–≥–¥–µ –ª–µ–∂–∞—Ç bin/, lib/, include/, device-specs/)
    TOOLS_ROOT = (Path(__file__).parent.parent / "bin").resolve()
    BIN_DIR = TOOLS_ROOT / "bin"  # –ì–¥–µ avr-gcc.exe –∏ —Ç.–ø.

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = {
        'gcc': BIN_DIR / "avr-gcc.exe",
        'objcopy': BIN_DIR / "avr-objcopy.exe",
        'avrdude': BIN_DIR / "avrdude.exe",
        'specs': TOOLS_ROOT / "device-specs" / "specs-atmega328p",
        'includes': TOOLS_ROOT / "include"
    }

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π:")
    for name, path in required_files.items():
        print(f"{name}: {path} | –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {path.exists()}")

    missing = [name for name, path in required_files.items() if not path.exists()]
    if missing:
        error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing)}\n" \
                    f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏—Ö –∏–∑ Arduino IDE –≤ –ø–∞–ø–∫—É:\n{TOOLS_ROOT}"
        print(error_msg)
        return

    avr_tools = {
        'gcc': str(required_files['gcc']),
        'objcopy': str(required_files['objcopy']),
        'avrdude': str(required_files['avrdude'])
    }

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—ã
    boards = {
        "ATmega328P": "atmega328p",
        "ATmega328PB": "atmega328pb",
        "ATmega168PA": "atmega168pa"
    }

    # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    app = MainWindow(avr_tools=avr_tools, boards=boards, tools_root=TOOLS_ROOT)
    app.mainloop()
